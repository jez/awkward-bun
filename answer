#!/usr/bin/env python
import time
import sys
import tfidf
import answer_finding
import question_classification
import grammar_util    
import normalize
import codecs
article_name = sys.argv[1]
query_name = sys.argv[2]

num_sentences = 5

start_time = time.time()
def generate_query(text):
    try:
        query_tree = answer_finding.parser.raw_parse(text).next()
        return query_tree
    except:
        return None

def wrapper_norm(x):
    try:
        return normalize.normalize(x)
    except:
        return None

def scoring_wrapper(f, x, n):
    try:
        return f(x,n)
    except:
        return None

def select_wrapper(s, q, t):
    try:
        return answer_finding.select_answer(s,q,t)
    except:
        return u" "

with codecs.open(query_name, encoding="utf-8", errors='ignore') as query_f:
    queries = query_f.readlines()
scoring_function = tfidf.tfidf(article_name)
query_trees = map(lambda q: wrapper_norm(generate_query(q)), queries)
sentences_lists = map(lambda x: scoring_wrapper(scoring_function, x, num_sentences), queries)

results = map(lambda (sents, query): select_wrapper(sents, query, start_time), zip(sentences_lists, query_trees))


for i in results:
    i.encode('utf-8')
    print i
